# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

stages:
- stage: __default

  jobs:
  - job: Job
    pool:
      vmImage: 'ubuntu-latest'
    strategy:
      matrix:
        Tests_High: 
          TestsPriority: "High"
        Tests_Medium:
          TestsPriority: "Medium"
        Tests_Low:
          TestsPriority: "Low"

      maxParallel: 3 
  
    variables:
        - group: GlobalVariables

    steps:
    - task: Bash@3
      displayName: 'Create Java test image'
      inputs:
        targetType: 'inline'
        script: 'docker build -t seleniumtests .'
        
    - task: Bash@3
      displayName: 'Run Java test container'
      inputs:
        targetType: 'inline'
        script: 'docker run -e "BROWSER=chrome" --name tests seleniumtests'
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'export BROWSER=$(BROWSER)'
    
    - task: Bash@3
      displayName: "display files from project folder"
      inputs:
        targetType: 'inline'
        script: 'ls $(System.DefaultWorkingDirectory)'

    - task: Bash@3
      displayName: 'Start Java Test Container'
      inputs:
        targetType: inline
        script: 'docker start tests' 
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Log File as Artifact'
      condition: always()
      inputs:         
          PathtoPublish: $(System.DefaultWorkingDirectory)/target/logs
          ArtifactName: logs
    
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Screenshot File as Artifact'
      condition: always()
      inputs:         
          PathtoPublish: $(System.DefaultWorkingDirectory)/target/screenshots
          ArtifactName: screenshots
    

    - task: PublishBuildArtifacts@1
      displayName: 'Publish Testoutpu File as Artifact'
      condition: always()
      inputs:         
          PathtoPublish: $(System.DefaultWorkingDirectory)/target/surefire-reports
          ArtifactName: testoutput

    - task: Bash@3
      displayName: 'Copy Screenshots From Run Java Test Container'
      condition: always()
      inputs:
        targetType: inline
        script: 'docker cp tests:/target/screenshots screenshots'
        
    - task: Bash@3
      displayName: 'Copy Logs From Run Java Test Container'
      condition: always()
      inputs:
        targetType: inline
        script: 'docker cp tests:/target/logs logs'
    
    - task: Bash@3
      displayName: Copy Test-Output From Run Java Test Container
      condition: always()
      inputs:
        targetType: inline
        script: docker cp tests:/target/surefire-reports testoutput

    - task: Bash@3
      displayName: 'Display Folders from Default Working Directory'
      inputs:
        targetType: inline
        script: 'ls $(System.DefaultWorkingDirectory)'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/screenshots'
        publishLocation: 'pipeline'
        artifact: 'screenshots'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/logs'
        publishLocation: 'pipeline'
        artifact: 'logs'
    
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/testoutput'
        publishLocation: 'pipeline'
        artifact: 'testoutput'
    
    - task: PublishTestResults@2
      condition: always()
      inputs:
        testResultsFormat: JUnit
        testResultsFiles: '**/junitreports/TEST-*.xml'

    - task: Maven@3

      inputs:

        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'clean test -Dgroups=$(TestsPriority) -X'
        
    - task: Bash@3
      displayName: "display files from project folder"
      inputs:
        targetType: 'inline'
        script: 'ls $(System.DefaultWorkingDirectory)'
    
